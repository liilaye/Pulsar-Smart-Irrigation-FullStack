// Types et interfaces
export interface IrrigationRequest {
  durationHours: number;
  durationMinutes: number;
  scheduledBy: 'ML' | 'MANUAL';
  timestamp: string;
}

export interface MLPrediction {
  duree_minutes: number;
  volume_eau_m3: number;
  matt: string;
  status: string;
  mqtt_started?: boolean;
  mqtt_message?: string;
  auto_irrigation?: boolean;
}

export interface BackendResponse {
  success: boolean;
  message: string;
  data?: any;
}

export interface IrrigationSystem {
  type: string;
  name: string;
}

export interface TrendAnalysis {
  waterConsumption: number;
  soilMoisture: number;
  efficiency: number;
  trend: 'increasing' | 'decreasing' | 'stable';
}

export interface MLPredictionAnalysis {
  nextIrrigationHours: number;
  recommendedDuration: number;
  soilCondition: string;
  weatherImpact: string;
}

import { irrigationDataService } from './irrigationDataService';

class BackendService {
  private getBaseUrl(): string {
    // En local, utiliser le proxy Vite qui redirige vers localhost:5002
    return '/api';
  }

  private async makeRequest(url: string, options: RequestInit = {}): Promise<Response> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000);

    try {
      const fullUrl = url.startsWith('http') ? url : `${this.getBaseUrl()}${url.startsWith('/') ? url : `/${url}`}`;
      console.log(`üîÑ Requ√™te vers: ${fullUrl}`);
      
      const response = await fetch(fullUrl, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      clearTimeout(timeoutId);
      console.log(`‚úÖ R√©ponse re√ßue: ${response.status} ${response.statusText}`);
      return response;
    } catch (error) {
      clearTimeout(timeoutId);
      if (error instanceof Error && error.name === 'AbortError') {
        throw new Error('Timeout: Le serveur Flask ne r√©pond pas (15s)');
      }
      throw error;
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Test de connexion Flask...');
      const response = await this.makeRequest('/health');
      const isConnected = response.ok;
      console.log(`${isConnected ? '‚úÖ' : '‚ùå'} Test connexion Flask: ${isConnected ? 'OK' : '√âCHEC'}`);
      return isConnected;
    } catch (error) {
      console.error('‚ùå Test connexion Flask √©chou√©:', error);
      return false;
    }
  }

  async publishMQTTCommand(device: 0 | 1): Promise<BackendResponse> {
    try {
      console.log(`üì° Envoi commande MQTT via Flask: device=${device}`);
      const response = await this.makeRequest('/mqtt/test-publish', {
        method: 'POST',
        body: JSON.stringify({ device })
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Commande MQTT envoy√©e:', data);
        return { success: true, message: 'Commande MQTT envoy√©e', data };
      } else {
        const error = await response.text();
        console.error('‚ùå Erreur commande MQTT:', error);
        return { success: false, message: `Erreur HTTP ${response.status}: ${error}` };
      }
    } catch (error) {
      console.error('‚ùå Erreur requ√™te MQTT Flask:', error);
      return { success: false, message: `Erreur de connexion: ${error}` };
    }
  }

  async arroserAvecML(features: number[]): Promise<MLPrediction> {
    try {
      console.log('ü§ñ Envoi des features pour arrosage IA (ML) AUTO vers Flask...');
      console.log('üìä Features (tableau ordonn√©):', features);
      const response = await this.makeRequest('/arroser', {
        method: 'POST',
        body: JSON.stringify({ features })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Recommandation IA + MQTT AUTO re√ßue depuis Flask:', data);

      if (data.status === 'ok') {
        irrigationDataService.addIrrigation({
          timestamp: new Date(),
          volume_m3: data.volume_eau_m3,
          duree_minutes: data.duree_minutes,
          source: 'ml',
          type: 'ml'
        });
        
        // üöÄ Log sp√©cial pour irrigation automatique ML
        if (data.auto_irrigation && data.mqtt_started) {
          console.log('üöø IRRIGATION ML AUTO D√âMARR√âE ! Dur√©e:', data.duree_minutes, 'min');
        }
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la requ√™te ML AUTO:', error);
      throw error;
    }
  }

  async getMLRecommendation(soilClimateFeatures: number[]): Promise<MLPrediction | null> {
    try {
      console.log('ü§ñ Envoi requ√™te ML vers Flask backend...');
      console.log('üìä Features envoy√©es:', soilClimateFeatures);
      const response = await this.makeRequest('/arroser', {
        method: 'POST',
        body: JSON.stringify({
          features: soilClimateFeatures
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ R√©ponse ML Flask re√ßue:', data);

      if (data.status === 'ok') {
        irrigationDataService.addIrrigation({
          timestamp: new Date(),
          volume_m3: data.volume_eau_m3,
          duree_minutes: data.duree_minutes,
          source: 'ml',
          type: 'ml'
        });
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erreur requ√™te ML Flask:', error);
      throw error;
    }
  }

  async startManualIrrigation(durationHours: number, durationMinutes: number): Promise<BackendResponse> {
    try {
      console.log('üöø D√©marrage irrigation manuelle via Flask...');
      const response = await this.makeRequest('/irrigation/manual', {
        method: 'POST',
        body: JSON.stringify({
          durationHours,
          durationMinutes,
          scheduledBy: 'MANUAL',
          timestamp: new Date().toISOString()
        }),
      });

      const data = await response.json();
      console.log('‚úÖ R√©ponse irrigation manuelle Flask:', data);

      if (data.success) {
        const totalMinutes = (durationHours * 60) + durationMinutes;
        const estimatedVolume = (totalMinutes * 20) / 1000;
        irrigationDataService.addIrrigation({
          timestamp: new Date(),
          volume_m3: estimatedVolume,
          duree_minutes: totalMinutes,
          source: 'manual',
          type: 'manual'
        });
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erreur irrigation manuelle Flask:', error);
      return { success: false, message: `Erreur de connexion: ${error}` };
    }
  }

  async stopIrrigation(): Promise<BackendResponse> {
    try {
      console.log('‚èπÔ∏è Arr√™t irrigation via Flask...');
      const response = await this.makeRequest('/irrigation/stop', {
        method: 'POST'
      });

      const data = await response.json();
      console.log('‚úÖ R√©ponse arr√™t irrigation Flask:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur arr√™t irrigation Flask:', error);
      return { success: false, message: 'Erreur de connexion au backend Flask' };
    }
  }

  async sendMQTTCommand(device: 0 | 1): Promise<BackendResponse> {
    try {
      console.log(`üì° Envoi commande MQTT via Flask: device=${device}`);
      const response = await this.makeRequest('/mqtt/command', {
        method: 'POST',
        body: JSON.stringify({ device })
      });

      const data = await response.json();
      console.log('R√©ponse commande MQTT Flask:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur commande MQTT Flask:', error);
      return { success: false, message: 'Erreur de connexion au backend Flask' };
    }
  }

  async getIrrigationStatus(): Promise<any> {
    try {
      const response = await this.makeRequest('/irrigation/status');
      
      if (!response.ok) {
        console.error(`‚ùå Erreur HTTP ${response.status} lors de la r√©cup√©ration du statut`);
        return null;
      }

      // V√©rifier si la r√©ponse contient du JSON valide
      const text = await response.text();
      if (!text.trim()) {
        console.error('‚ùå R√©ponse vide du serveur');
        return null;
      }

      try {
        const data = JSON.parse(text);
        return data;
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON:', parseError, 'R√©ponse:', text);
        return null;
      }
    } catch (error) {
      console.error('‚ùå Erreur statut irrigation Flask:', error);
      return null;
    }
  }

  async updateIrrigationSystem(systemType: string): Promise<BackendResponse> {
    try {
      console.log('üîß Mise √† jour syst√®me irrigation via Flask...');
      const response = await fetch(`${this.getBaseUrl()}/irrigation/system`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ systemType })
      });

      const data = await response.json();
      console.log('R√©ponse syst√®me irrigation Flask:', data);
      return data;
    } catch (error) {
      console.error('Erreur syst√®me irrigation Flask:', error);
      return { success: false, message: 'Erreur de connexion au backend Flask' };
    }
  }

  async sendSchedulesToBackend(schedules: any): Promise<BackendResponse> {
    try {
      console.log('Envoi planning vers Flask backend...');
      const response = await fetch(`${this.getBaseUrl()}/irrigation/schedule`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ schedules })
      });

      const data = await response.json();
      console.log('R√©ponse planning Flask:', data);
      return data;
    } catch (error) {
      console.error('Erreur planning Flask:', error);
      return { success: false, message: 'Erreur de connexion au backend Flask' };
    }
  }

  async getTrendAnalysis(): Promise<TrendAnalysis | null> {
    try {
      console.log('R√©cup√©ration analyse des tendances Flask...');
      const response = await this.makeRequest('/analytics/trends');

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Analyse des tendances re√ßue:', data);
      return data;
    } catch (error) {
      console.error('Erreur analyse tendances Flask:', error);
      return {
        waterConsumption: 0.85,
        soilMoisture: 42,
        efficiency: 88,
        trend: 'stable'
      };
    }
  }

  async getMLPredictionAnalysis(): Promise<MLPredictionAnalysis | null> {
    try {
      console.log('üß† R√©cup√©ration pr√©dictions ML Flask...');
      const response = await this.makeRequest('/analytics/ml-predictions');

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Pr√©dictions ML re√ßues:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur pr√©dictions ML Flask:', error);
      return {
        nextIrrigationHours: 6,
        recommendedDuration: 30,
        soilCondition: 'Optimal',
        weatherImpact: 'Favorable'
      };
    }
  }

  getDefaultSoilClimateFeatures(): number[] {
    // ‚úÖ CORRECTION: Retourner un tableau ordonn√© de 15 valeurs
    return [
      25.0,   // Temp√©rature_air_(¬∞C)
      0,      // Pr√©cipitation_(mm)
      65,     // Humidit√©_air_(%)
      12.0,   // Vent_moyen_(km/h)
      1,      // Type_culture
      10000,  // P√©rim√®tre_agricole_(m2)
      26.0,   // Temp√©rature_sol_(¬∞C)
      42,     // Humidit√©_sol_(%)
      1.2,    // EC_(dS/m)
      6.8,    // pH_sol
      45,     // Azote_(mg/kg)
      38,     // Phosphore_(mg/kg)
      152,    // Potassium_(mg/kg)
      3,      // Fertilit√©_(score)
      2       // Type_sol
    ];
  }
}

export const backendService = new BackendService();
