
// src/services/apiService.ts

// On utilise le proxy configur√© dans vite.config.ts
// BASE_URL n'est plus n√©cessaire car le proxy redirige /api vers le backend

export const api = {
  /**
   * Envoie les caract√©ristiques au mod√®le ML pour d√©cider de l'arrosage.
   * @param features - TABLEAU ordonn√© de 15 valeurs num√©riques pour XGBoost.
   */
  arroserAvecML: async (features: number[]) => {
    try {
      console.log("ü§ñ Envoi requ√™te ML vers Flask backend...");
      console.log("üîÑ Requ√™te vers: /api/arroser");
      console.log("üìä Features (tableau de 15 valeurs):", features);
      
      const res = await fetch(`/api/arroser`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ features }),
      });

      console.log("‚úÖ R√©ponse re√ßue:", res.status, res.statusText);
      
      if (!res.ok) {
        console.error("‚ùå Erreur lors de l'appel √† /api/arroser");
        throw new Error(`Erreur backend /arroser: ${res.status}`);
      }

      return res.json();
    } catch (error) {
      console.error("‚ùå Erreur requ√™te ML Flask:", error);
      throw error;
    }
  },

  /**
   * D√©marre un arrosage manuel pendant une dur√©e sp√©cifi√©e.
   * @param durationMinutes - Dur√©e de l'arrosage en minutes (par d√©faut 30).
   * @param scheduledBy - Origine de la demande ("MANUAL" par d√©faut).
   */
  startManualIrrigation: async (
    durationMinutes: number = 30,
    scheduledBy: string = "MANUAL"
  ) => {
    try {
      console.log("üöø D√©marrage irrigation manuelle...");
      const res = await fetch(`/api/irrigation/manual`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          durationMinutes,
          scheduledBy,
          timestamp: new Date().toISOString(),
        }),
      });

      console.log("‚úÖ R√©ponse:", res.status, res.statusText);

      if (!res.ok) {
        console.error("‚ùå Erreur lors de l'appel √† /api/irrigation/manual");
        throw new Error(`Erreur backend /irrigation/manual: ${res.status}`);
      }

      return res.json();
    } catch (error) {
      console.error("‚ùå Erreur irrigation manuelle:", error);
      throw error;
    }
  },

  /**
   * Arr√™te l'arrosage en cours.
   */
  stopIrrigation: async () => {
    try {
      console.log("‚èπÔ∏è Arr√™t irrigation...");
      const res = await fetch(`/api/irrigation/stop`, {
        method: "POST",
      });

      console.log("‚úÖ R√©ponse:", res.status, res.statusText);

      if (!res.ok) {
        console.error("‚ùå Erreur lors de l'appel √† /api/irrigation/stop");
        throw new Error(`Erreur backend /irrigation/stop: ${res.status}`);
      }

      return res.json();
    } catch (error) {
      console.error("‚ùå Erreur arr√™t irrigation:", error);
      throw error;
    }
  },

  /**
   * V√©rifie l'√©tat de sant√© du backend.
   */
  checkHealth: async () => {
    try {
      console.log("üîç V√©rification sant√© backend...");
      const res = await fetch(`/api/health`);
      
      console.log("‚úÖ R√©ponse:", res.status, res.statusText);
      
      if (!res.ok) {
        console.error("‚ùå Erreur v√©rification sant√©:", res.status, res.statusText);
        throw new Error(`Erreur sant√© backend: ${res.status}`);
      }
      
      return await res.json();
    } catch (error) {
      console.error("‚ùå Erreur de connexion avec le backend :", error);
      throw error;
    }
  },

  /**
   * R√©cup√®re les donn√©es m√©t√©o pour une ville.
   * @param location - Nom de la ville.
   */
  getWeather: async (location: string) => {
    try {
      console.log("üå§Ô∏è Fetch m√©t√©o pour:", location);
      const res = await fetch(`/api/weather/${location}`);
      
      if (!res.ok) {
        console.error(`‚ùå Erreur m√©t√©o pour ${location}:`, res.status);
        throw new Error(`Erreur m√©t√©o ${location}: ${res.status}`);
      }
      
      return await res.json();
    } catch (error) {
      console.error(`‚ùå Erreur fetch m√©t√©o pour ${location}:`, error);
      throw error;
    }
  },

  /**
   * R√©cup√®re les donn√©es m√©t√©o en temps r√©el pour une ville.
   * @param location - Nom de la ville.
   */
  getRealtimeWeather: async (location: string) => {
    try {
      console.log("‚ö° Fetch m√©t√©o temps r√©el pour:", location);
      const res = await fetch(`/api/weather/${location}/realtime`);
      
      if (!res.ok) {
        console.error(`‚ùå Erreur m√©t√©o temps r√©el pour ${location}:`, res.status);
        throw new Error(`Erreur m√©t√©o temps r√©el ${location}: ${res.status}`);
      }
      
      return await res.json();
    } catch (error) {
      console.error(`‚ùå Erreur fetch m√©t√©o temps r√©el pour ${location}:`, error);
      throw error;
    }
  }
};
