
import joblib
import pandas as pd
import numpy as np
import os
from config.mqtt_config import MODEL_PATH, DEBIT_LITRES_PAR_MIN

class MLService:
    def __init__(self):
        self.model = None
        self.model_path = os.path.join("models", "xgboost_arrosage_litres.pkl")
        self.load_model()

    def load_model(self):
        """Charge le mod√®le XGBoost pr√©-entra√Æn√©"""
        if not os.path.exists(self.model_path):
            print(f"‚ö†Ô∏è Mod√®le non trouv√© √† l'emplacement : {self.model_path}")
            print("üîÑ Utilisation du mode fallback avec calculs par d√©faut")
            self.model = None
            return
        
        try:
            self.model = joblib.load(self.model_path)
            print("‚úÖ Mod√®le XGBoost charg√© avec succ√®s.")
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement du mod√®le : {e}")
            print("üîÑ Utilisation du mode fallback")
            self.model = None

    def predict_irrigation(self, features_data):
        """Pr√©dit la quantit√© d'eau n√©cessaire bas√©e sur les features agro-climatiques"""
        try:
            # V√©rifier le format des donn√©es d'entr√©e
            if not isinstance(features_data, list) or len(features_data) != 15:
                raise ValueError(f"Exactement 15 features requises, re√ßu: {len(features_data) if isinstance(features_data, list) else 'non-liste'}")
            
            # ‚úÖ CORRECTION: Conversion stricte en float64 pour √©viter l'erreur NumPy isnan
            try:
                features_array = np.array([float(f) for f in features_data], dtype=np.float64)
                print(f"üîß Features converties en float64: {features_array}")
            except (ValueError, TypeError) as e:
                raise ValueError(f"Toutes les features doivent √™tre num√©riques: {e}")
            
            # Si le mod√®le est disponible, l'utiliser
            if self.model:
                try:
                    # Colonnes attendues par le mod√®le
                    columns = [
                        "Temp√©rature_air_(¬∞C)", "Pr√©cipitation_(mm)", "Humidit√©_air_(%)", "Vent_moyen_(km/h)",
                        "Type_culture", "P√©rim√®tre_agricole_(m2)", "Temp√©rature_sol_(¬∞C)", "Humidit√©_sol_(%)",
                        "EC_(dS/m)", "pH_sol", "Azote_(mg/kg)", "Phosphore_(mg/kg)", "Potassium_(mg/kg)",
                        "Fertilit√©_(score)", "Type_sol"
                    ]
                    
                    # ‚úÖ CORRECTION: Cr√©er DataFrame avec dtype explicit float64
                    features_df = pd.DataFrame([features_array], columns=columns, dtype=np.float64)
                    
                    # V√©rifier qu'il n'y a pas de NaN
                    if features_df.isnull().any().any():
                        print("‚ö†Ô∏è NaN d√©tect√©s dans les features, utilisation du fallback")
                        volume_m3 = self._calculate_fallback_volume(features_array)
                    else:
                        # Pr√©diction avec gestion d'erreur NumPy
                        try:
                            volume_m3_raw = self.model.predict(features_df)[0]
                            volume_m3 = max(0.001, float(volume_m3_raw))  # Minimum 1L
                            print(f"‚úÖ Pr√©diction ML avec mod√®le: {volume_m3:.3f} m¬≥")
                        except Exception as numpy_error:
                            print(f"‚ö†Ô∏è Erreur NumPy/XGBoost: {numpy_error}")
                            volume_m3 = self._calculate_fallback_volume(features_array)
                    
                except Exception as model_error:
                    print(f"‚ö†Ô∏è Erreur avec le mod√®le, utilisation du fallback: {model_error}")
                    volume_m3 = self._calculate_fallback_volume(features_array)
            else:
                # Calcul par d√©faut si pas de mod√®le
                volume_m3 = self._calculate_fallback_volume(features_array)
                print(f"‚úÖ Pr√©diction fallback: {volume_m3:.3f} m¬≥")
            
            # Calculs d√©riv√©s
            volume_litres = volume_m3 * 1000
            duree_minutes = volume_litres / DEBIT_LITRES_PAR_MIN
            duree_sec = max(30, int(duree_minutes * 60))  # Minimum 30 secondes
            
            result = {
                "volume_m3": float(round(volume_m3, 3)),
                "volume_litres": float(round(volume_litres, 2)),
                "duree_minutes": float(round(duree_minutes, 2)),
                "duree_sec": duree_sec
            }
            
            print(f"üìä R√©sultat ML final: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur pr√©diction ML: {str(e)}")
            raise Exception(f"Erreur pr√©diction ML: {str(e)}")

    def _calculate_fallback_volume(self, features):
        """Calcul par d√©faut bas√© sur les param√®tres agro-climatiques"""
        try:
            temp_air = float(features[0])  # Temp√©rature_air_(¬∞C)
            humidite_air = float(features[2])  # Humidit√©_air_(%)
            perimetre = float(features[5])  # P√©rim√®tre_agricole_(m2)
            humidite_sol = float(features[7])  # Humidit√©_sol_(%)
            
            # Calcul simple bas√© sur les conditions
            base_volume = 0.3  # Volume de base en m¬≥
            
            # Ajustements selon conditions
            if temp_air > 30:
                base_volume += 0.2  # Plus chaud = plus d'eau
            if humidite_air < 60:
                base_volume += 0.15  # Air sec = plus d'eau
            if humidite_sol < 40:
                base_volume += 0.25  # Sol sec = plus d'eau
            if perimetre > 5000:
                base_volume += 0.1  # Grande surface = plus d'eau
                
            return max(0.2, min(2.0, base_volume))  # Entre 200L et 2000L
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur calcul fallback: {e}")
            return 0.6  # Valeur par d√©faut: 600L

# Instance globale
ml_service = MLService()
